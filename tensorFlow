import tensorflow as tf
import pandas as pd
print(tf.version)

#Creating tensors
string = tf.Variable('This is a string', tf.string)
number = tf.Variable(324, tf.int16)
floating = tf.Variable(3.987, tf.float64)

#Rank/Degree of Tensor: Number of dimensions in the Tensor
rank1_tensor = tf.Variable(['Test'], tf.string)
rank2_tensor = tf.Variable([['test','ok'], ['test', 'yes']], tf.string)

tf.rank(rank1_tensor)

#Shape of tensor: The number of elements in each dimension
rank2_tensor.shape

#Changing the shape: Thre are many shape for the same number of elements in a tensor
tensor1 = tf.ones([1,2,3])
tensor2 = tf.reshape(tensor1, [2,3,1])
tensor3 = tf.reshape(tensor2, [3, -1])

print(tensor1)
print(tensor2)
print(tensor3)

!pip install -q sklearn

%tensorflow_version 2.x

import tensorflow as tf
print(tf.version)

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib

#Load dataset
dftrain= pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv') #training data
dfeval= pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv') #testing data
y_train= dftrain.pop('survived')
y_eval= dfeval.pop('survived')

#Explore the data
dftrain.head()

print(dftrain.loc[0], y_train.loc[0])

dftrain.describe()

dftrain.shape

dftrain.age.hist(bins=20)

dftrain.sex.value_counts().plot(kind='barh')

dftrain['class'].value_counts().plot(kind='barh')

pd.concat([dftrain, y_train], axis=1).groupby('sex').survived.mean().plot(kind='barh').set_xlabel('% survive')

#training vs testing
dfeval.shape

CATEGORICAL_COLUMNS = ['sex', 'n_siblings_spouses', 'parch', 'class', 'deck', 'embark_town', 'alone']
NUMERIC_COLUMNS = ['age', 'fare']

feature_columns = []
for feature_name in CATEGORICAL_COLUMNS:
  vocabulary = dftrain[feature_name].unique() # gets a list of all the unique values fromm a given feature column
  feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))

for feature_name in NUMERIC_COLUMNS:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

dftrain['embark_town'].unique()

#Input Function: specifies how data is converted to a tf.data.Dataset that feeds the input pipeline in a streaming fashion.
#tf.data.Dataset can take in multiple sources such as a dataframe, a csv-formatted file, and more.
def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):
  def input_function(): # inner function, this will be returned.
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df)) # create dataset object with data and its label
    if shuffle:
      ds = ds.shuffle(1000) # randomise the order of data
    ds = ds.batch(batch_size).repeat(num_epochs) #splits data into batches of 32 and repeats process of the number epochs
    return ds #return a batch of the dataset
  return input_function

train_input_fn = make_input_fn(dftrain, y_train) #jere we will cal in the input_function that was returned to gs to get a dataset that we feed the model
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)

linear_est.train(train_input_fn)
result = linear_est.evaluate(eval_input_fn)

clear_output()
print(result['accuracy'])
print(result)

result =list(linear_est.predict(eval_input_fn))
print(dfeval.loc[2])
print(y_eval.loc[2])
print(result[2]['probabilities'][1])# [0]= deaths, [1]= survival
