#Build Q table
import gym
import numpy as np
import time

new_step_api=True
env = gym.make('FrozenLake-v1')
states = env.observation_space.n
actions = env.action_space.n

Q= np.zeros((state, actions)) # creates a matrix with all 0 values
Q

#constants
episodes = 1000 # how many times to run the environment from the beginning
max_steps = 100 # max number of steps allowed for each run of the environment

learning_rate = 0.81 # learing rate
gamma =0.96

render = False

# Picking an action
epsilon = 0.9 # start with a 90% chance of a random number

# code to pick action
if np.random.uniform(0, 1)< epsilon: # check if the randomly selected number is less than epsilon
  action = env.action_space.sample() # take randpm action
else:
  np.argmax(Q[state, :]) # use Q table to pick best action based on current values

# Updating Q values
rewards = []
for episode in range(episodes):

  state= env.reset()
  for _ in range(max_steps):

    if render:
      env.render()

    if np.random.uniform(0, 1)< epsilon:
      action = env.action_space.sample()
    else:
      np.argmax(Q[state, :])

    new_state, reward, done, info = env.step(action)

    Q[state, action] = Q[state, action] + learning_rate * ( reward + gamma * np.max(Q[new_state, :]) - Q[state, action])

    state = new_state

    if done:
      rewards.append(reward)
      epsilon -= 0.001
      break

print(Q)
print(f'Average reward: {sum(rewards)/len(rewards)}')

import matplotlib.pyplot as plt

def get_average(values):
  return sum(values)/len(values)

avg_rewards = []
for i in range(0, len(rewards), 100):
  avg_rewards.append(get_average(rewards[i:i+100]))

plt.plot(avg_rewards)
plt.ylabel('average reward')
plt.xlabel('episodes (100/s)')
plt.show()
