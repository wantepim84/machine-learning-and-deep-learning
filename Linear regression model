import pandas as pd

path_to_file = 'student_scores.csv'
df = pd.read_csv(path_to_file)

df.head()

df.shape

df.plot.scatter(x='Hours', y='Scores', title='Scatterplot of hours and scores percentages');

# To find the correlation. Anything above 0.8 is considered to be a strong positive correlation.
print(df.corr())

#Statiscal summary of the dataset
print(df.describe())

#DATA PROCESSING
y = df['Scores'].values.reshape(-1, 1)
X = df['Hours'].values.reshape(-1, 1)

print(df['Hours'].values)
print(df['Hours'].values.shape)

print(X.shape)
print(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

SEED = 42

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = SEED)

print(X_train)
print(y_train)

#Training Linear Regression Model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

regressor.fit(X_train, y_train)

# To find the intercept
print(regressor.intercept_)

#To find the coeffcient
print(regressor.coef_)

#Making predictions
def calc(slope, intercept, hours):
    return slope*hours+intercept

score = calc(regressor.coef_, regressor.intercept_, 9.5)
print(score)

#second method
score = regressor.predict([[9.5]])
print(score)

y_pred = regressor.predict(X_test)

df_preds = pd.DataFrame({'Actual': y_test.squeeze(), 'Predicted': y_pred.squeeze()})
print(df_preds)

#Evaluating the Model
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

#Metric calculations
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Mean absolute error: {mae:.2f}')
print(f'Mean squared error: {mse:.2f}')
print(f'Root mean squared error: {rmse:.2f}')
